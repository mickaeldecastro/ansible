---
- name: Create a database for Sonar.
  mysql_db:
    login_user: root
    login_password: root
    name: "{{ sonar_mysql_database }}"
    state: present

- name: Create a sonar user.
  mysql_user:
    login_user: root
    login_password: root
    name: "{{ sonar_mysql_username }}"
    host: "{{ item }}"
    priv: "{{ sonar_mysql_database }}.*:ALL"
    password: "{{ sonar_mysql_password }}"
  with_items: "{{ sonar_mysql_allowed_hosts }}"

- name: Download Sonar.
  get_url:
    url: "{{ sonar_download_url }}"
    dest: "{{ workspace }}/{{ sonar_version_directory }}.zip"

- name: Unzip Sonar.
  become: yes
  unarchive:
    src: "{{ workspace }}/{{ sonar_version_directory }}.zip"
    dest: /usr/local/
    copy: no
    creates: /usr/local/sonar/COPYING

- name: Move Sonar into place.
  become: yes
  shell: >
    mv /usr/local/{{ sonar_version_directory }} /usr/local/sonar
    creates=/usr/local/sonar/COPYING

- include: configure.yml

- name: Add sonar symlinks for service management.
  become: yes
  file:
    src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
    dest: "{{ item }}"
    state: link
  with_items:
    - /usr/bin/sonar
    - /etc/init.d/sonar

- name: Ensure Sonar is running and set to start on boot.
  service: name=sonar state=started enabled=yes
  become: yes

- name: Make sure Sonar is responding on the configured port.
  wait_for: port=9000 delay=3 timeout=300

- name: Generate SSL certificate for sonar
  become: yes
  shell: bash -c 'systemctl stop nginx && letsencrypt --agree-tos --email it@platinium-group.org -d sonar.gootickets.com certonly'
  args:
    creates: /etc/letsencrypt/live/sonar.gootickets.com/fullchain.pem
  notify:
    - Start nginx

- name: Install nginx configuration
  become: yes
  copy: src=sonar.nginx.conf dest=/etc/nginx/sites-enabled/sonar.conf
  notify:
    - Reload nginx
